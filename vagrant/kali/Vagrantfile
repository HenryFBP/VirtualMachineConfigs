# -*- mode: ruby -*-
# vi: set ft=ruby :

# monkey patch for https://github.com/hashicorp/vagrant/issues/8878
class VagrantPlugins::ProviderVirtualBox::Action::Network
  def dhcp_server_matches_config?(dhcp_server, config)
    true
  end
end

VM_NAME = 'Kali Linux Rolling Latest'
VM_IP = '192.168.33.7'
VM_RAM_MB='5000'
VM_CPUS='1'

Vagrant.configure("2") do |config|

  config.vm.box = "kalilinux/rolling"
  # config.vm.box_version = "2021.3.0"

  config.vm.define VM_NAME
  config.vm.network "private_network", ip: VM_IP # XXX Disable this line if the machine fails to provision on Windows

  # disable default shared folder
  config.vm.synced_folder './', '/vagrant', disabled: true
  config.vm.synced_folder 'shared', '/vagrant'

  config.disksize.size = '500GB'

  # VirtualBox specific settings
  config.vm.provider "virtualbox" do |vb|
    # Show the VirtualBox GUI when booting the machine
    vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = VM_RAM_MB

    vb.cpus = VM_CPUS

  end

  # initial apt-get update, fix keys
  config.vm.provision "shell", inline: <<-SHELL
      # apt-key adv --keyserver hkp://keys.gnupg.net --recv-keys 7D8D0BF6 # not needed anymore
      apt-get update
  SHELL

  # copy add-apt-repository
  config.vm.provision "file", source: "./scripts/add-apt-repository.sh", destination: "/tmp/add-apt-repository"

  # make add-apt-repository executable
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    sudo mv /tmp/add-apt-repository /usr/sbin/add-apt-repository

    chmod +x /usr/sbin/add-apt-repository
  SHELL

  # Copy useful scripts to desktop
  config.vm.provision "file",
                      source: "./scripts/desktop-scripts/tor-transparent-proxy-start.sh",
                      destination: "/home/vagrant/Desktop/"

  config.vm.provision "file",
                      source: "./scripts/desktop-scripts/tor-transparent-proxy-stop.sh",
                      destination: "/home/vagrant/Desktop/"

  # start timer
  config.vm.provision "shell", run: "always", inline: <<-SHELL
  
    echo `date` > /home/vagrant/start_vagrant_config
  SHELL

  # resize main partition to max size
  config.vm.provision "shell", path: "./scripts/resize-default-partitions-to-disk.sh"

  # clone cool repos
  config.vm.provision "shell", path: "../scripts/clone-cool-git-repos.sh"

  # useful tools
  config.vm.provision "shell", inline: <<-SHELL
    # apt-get upgrade -y # takes too long...

    export DEBIAN_FRONTEND=noninteractive # prevent installers from asking us stuff
    sudo gem install mdless

    apt-get install -y snapd
    snap install -y code --classic

    apt-get install -y htop iftop cpu-checker gedit transmission transmission-gtk baobab nano tcpdump maven perl-tk gnupg2 fish # python3-pip
    apt-get install -y kleopatra thunderbird


    if ! dpkg -s "docker-ce" 2>/dev/null; then
      echo "Installing docker-ce as it is not installed."
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | sudo tee /etc/apt/sources.list.d/docker.list
      apt-get update
      apt-get install -y docker-ce
    else
      echo "docker-ce is installed."
    fi

    sudo systemctl enable docker

    apt-get install -y libreoffice-writer
    sudo systemctl enable snapd.service
    sudo systemctl start snapd.service

    sudo systemctl enable apparmor # Required for `snap run` to work
    sudo systemctl start apparmor # This will stop SSH AFAIK

    snap install discord
    snap install wickrme
	
    apt install metasploit-framework

    # enpass
    if ! dpkg -s "enpass" 2>/dev/null; then
      echo "Installing enpass as it is not installed."
      echo "deb https://apt.enpass.io/ stable main" > /etc/apt/sources.list.d/enpass.list
      wget -O - https://apt.enpass.io/keys/enpass-linux.key | apt-key add -
      apt-get update
      apt-get install -y enpass
    else
      echo "enpass is installed."
    fi

    # init msfdb
    sudo msfdb init

  SHELL

  # KVM for android studio
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt install -y qemu-kvm libvirt0 virt-manager bridge-utils
  SHELL

  # virtualbox extensions
  config.vm.provision "shell", inline: <<-SHELL
    apt-get install -y build-essential dkms linux-headers-$(uname -r)
    apt-get install -y virtualbox-dkms virtualbox-guest-additions-iso virtualbox-guest-x11

    echo "REBOOT for a larger screen and other virtualbox-guest-additions goodies."

  SHELL

  # kalitorify, a systemwide tor proxy service.
  config.vm.provision "shell", inline: <<-SHELL

  apt-get install -y tor torbrowser-launcher

  which kalitorify
  # if exit code is nonzero, kalitorify is not a command.

  if [ "$?" -eq "1" ]; then

    pushd /home/vagrant/Desktop/
    git clone https://github.com/brainfucksec/kalitorify.git
    pushd kalitorify

    make install
    chown -R vagrant:vagrant /home/vagrant/Desktop/kalitorify

    echo "Kalitorify installed. Reboot and run 'kalitorify' to get started."

    popd

    rm -rf kalitorify

    popd

  else
    which kalitorify
    echo "Kalitorify is already installed. Exit status $?"
  fi

  SHELL

  # Android studio
  config.vm.provision "shell", inline: <<-SHELL

    sudo snap install android-studio --classic

  SHELL

  # stop timer
  config.vm.provision "shell", run: "always", inline: <<-SHELL
  
    echo `date` > /home/vagrant/stop_vagrant_config  

    echo "Start time:"
    cat /home/vagrant/start_vagrant_config

    echo "Stop time:"
    cat /home/vagrant/stop_vagrant_config

  SHELL

  config.vm.provision "shell", inline: <<-SHELL
    echo "Done. Take a snapshot!"
    echo "Run: 
    vagrant snapshot save 'after vagrant'"
  SHELL
end
